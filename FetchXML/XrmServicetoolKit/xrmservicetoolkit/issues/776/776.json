{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Solution provided to use a common class to make a common parameter on page load for user id, user roles, etc",
    "ClosedDate": "2013-01-23T03:02:09.773-08:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "I do a lot of `IsCurrentUserRole` for role-based form modifications and fetch on every call is making things slow.\n \n`getCurrentUserRoles` should cache results (or at least have an option to cache).\n \nResults of `getCurrentUserRoles` can be cached outside the library, but, obviously, it's preferable to have it inside.\n \nPS: XrmServiceToolkit is becoming the ultimate dynamics-crm-js library. Thanks!",
    "LastUpdatedDate": "2013-05-16T04:17:10.54-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "xrmservicetoolkit",
    "ReportedDate": "2012-05-15T05:10:24.427-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "`IsCurrentUserRole` should not do fetch on every call",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 776
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Hey There.\r\n\r\nThanks for your vote. Ideally, you should only need to call IsCurrentUserRole / getCurrentUserRoles once per page load. Not every single time you need to get the user inforamtion. \r\n\r\nA quick way to cache these results is to just create a local object to save the value. \r\n\r\nFor instance, \r\n\r\nvar isUserAdmin = XrmServiceToolkit.Soap.IsCurrentUserRole(\"system administrator\");\r\n\r\nvar currentUserRoles = XrmServiceTookit.Soap.GetCurrentUserRoles();\r\n\r\nThen just refer them later when you need in your code. \r\n\r\nIf the performance is still slow, you might need to have a look at the logics implemented and to see if there are too many service calls. If possible, try to use async calls instead for some methods. \r\n\r\nAs at the moment, refactor the libiray is not really on my list, but please provide ideas if you think there is a better way to make the library nicer.\r\n\r\nHappy Coding,\r\nJaimie",
      "PostedDate": "2012-05-28T03:27:15.633-07:00",
      "Id": -2147483648
    },
    {
      "Message": "I'm sorry for not providing the example and not being clear about what I mean. \r\n\r\nHere I call `IsCurrentUserRole` four times and `GetCurrentUserRoles` is called four times even though It can be called once:\r\n\r\n    var isUserAdmin = XrmServiceToolkit.Soap.IsCurrentUserRole(\"system administrator\"),\r\n        isMarketing = XrmServiceToolkit.Soap.IsCurrentUserRole(\"Marketing specialist\"),\r\n        isSalesPerson = XrmServiceToolkit.Soap.IsCurrentUserRole(\"Sales Manager\"),\r\n        isExternalAnalysist = XrmServiceToolkit.Soap.IsCurrentUserRole(\"External\");\r\n\r\nI've seen this use-pattern on more than one implementation. I think it's a common thing. That's why it will be lovely to have in the library.\r\n\r\nThank you!",
      "PostedDate": "2012-05-28T06:07:14.3-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Hey There.\r\n\r\nI see. I will put a note and see what can be achieved using JavaScript. (I do not have much advanced knowledge about caching using JavaScript). Caching user roles on local machine also sounds a bit dangerous for CRM. \r\n\r\nMaybe using another funciton from the toolkit GetCurrentUserRoles() will be better to reduce the call to the soap service. \r\n\r\nOr thinking about using the security role based forms if you can. \r\n\r\nJaimie",
      "PostedDate": "2012-06-06T01:19:10.51-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-01-23T03:02:09.773-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T16:56:01.937-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T04:17:10.54-07:00",
      "Id": -2147483648
    }
  ]
}