{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2013-05-08T02:06:14.55-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "This worked prior to UR 12.\n\nConsole error from developertoolkit reveals \n\n\"SCRIPT438: Object doesn't support property or method 'selectSingleNode' \". \n\nCode snippet (error is on response.selectSingleNode - see below)\n\n```\nfunction executeWorkflow(entityId, workflowId, successCallback, errorCallback) {\n    var requestMain = \"\"\n    requestMain += \"      <request i:type=\\\"b:ExecuteWorkflowRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\" xmlns:b=\\\"http://schemas.microsoft.com/crm/2011/Contracts\\\">\";\n    requestMain += \"        <a:Parameters xmlns:c=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">\";\n    requestMain += \"          <a:KeyValuePairOfstringanyType>\";\n    requestMain += \"            <c:key>EntityId</c:key>\";\n    requestMain += \"            <c:value i:type=\\\"d:guid\\\" xmlns:d=\\\"http://schemas.microsoft.com/2003/10/Serialization/\\\">\" + entityId + \"</c:value>\";\n    requestMain += \"          </a:KeyValuePairOfstringanyType>\";\n    requestMain += \"          <a:KeyValuePairOfstringanyType>\";\n    requestMain += \"            <c:key>WorkflowId</c:key>\";\n    requestMain += \"            <c:value i:type=\\\"d:guid\\\" xmlns:d=\\\"http://schemas.microsoft.com/2003/10/Serialization/\\\">\" + workflowId + \"</c:value>\";\n    requestMain += \"          </a:KeyValuePairOfstringanyType>\";\n    requestMain += \"        </a:Parameters>\";\n    requestMain += \"        <a:RequestId i:nil=\\\"true\\\" />\";\n    requestMain += \"        <a:RequestName>ExecuteWorkflow</a:RequestName>\";\n    requestMain += \"      </request>\";\n\n    // Execute it\n    var response = XrmServiceToolkit.Soap.Execute(requestMain, function (response) {\n        var workflowId = response.selectSingleNode('//a:KeyValuePairOfstringanyType[c:key=\\'Id\\']/c:value').nodeTypedValue;\n        successCallback(workflowId);\n    }, errorCallback);\n}\n```",
    "LastUpdatedDate": "2013-05-16T04:17:07.777-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "xrmservicetoolkit",
    "ReportedDate": "2013-04-17T13:54:04.207-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Soap.Execute issue with selectsinglenode",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 1246
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Another issue I found while debugging the code is that, although I'm running IE9, the xmlparser function thinks I'm another browser. Instead of executing the ActiveXObject branch, it tries to execute , parser.parseFromString. The problem is that parseFromString doesn't exist in the object returned from window.DOMParser.\r\n\r\n```\n    var xmlParser = function (txt) {\n        ///<summary>\n        /// cross browser responseXml to return a XML object\n        ///</summary>\n        var xmlDoc = null;\n        try {\n            // code for Mozilla, Firefox, Opera, etc.\n            if (window.DOMParser) {\n                // ReSharper disable InconsistentNaming\n                var parser = new DOMParser();\n                // ReSharper restore InconsistentNaming\n                xmlDoc = parser.parseFromString(txt, \"text/xml\");\n            }\n            else // Internet Explorer\n            {\n                xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n                xmlDoc.async = false;\n                xmlDoc.loadXML(txt);\n            }\n        } catch (e) {\n            alert(\"Cannot convert the XML string to a cross-browser XML object.\");\n        }\r\n\r\n        return xmlDoc;\n    };\n```",
      "PostedDate": "2013-04-17T18:46:29.26-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Hi.\r\n\r\nIt seems that __executeWorkflow__is a function developed from your side which is not part of the toolkit. Yes, you will need to make sure the code is supporting multiply browser when you try to use the result from the Execute result (XrmServiceToolkit.Soap.Execute only cares the part that it will return the response from CRM server)\r\n\r\nJaimie",
      "PostedDate": "2013-04-19T01:36:39.753-07:00",
      "Id": -2147483648
    },
    {
      "Message": "I acknowledge that the issue with selectsinglenode is not in the library's code. However, the root of the problem, at least in my case, is that the library's method, xmlparser, is not working properly.\r\n\r\nAs I mentioned in my previous message, I was using IE 9, and yet the code resolved \"if (window.DOMParser) {\" to true. The consequence is that it tries to use DOMParser. From IE 9 , the call to \" xmlDoc = parser.parseFromString(txt, \"text/xml\");\" does not return any results.\r\n\r\nIf the aforementioned \"if\" condition worked properly, it would have resulted to 'false' and loaded \"Microsoft.XMLDOM\". Furthermore, the xmlparser had worked, then my calling code would have been able to use 'selectsinglenode'. \r\n\r\n```\n    var xmlParser = function (txt) {\n        ///<summary>\n        /// cross browser responseXml to return a XML object\n        ///</summary>\n        var xmlDoc = null;\n        try {\n            // code for Mozilla, Firefox, Opera, etc.\n            if (window.DOMParser) {\n                // ReSharper disable InconsistentNaming\n                var parser = new DOMParser();\n                // ReSharper restore InconsistentNaming\n                xmlDoc = parser.parseFromString(txt, \"text/xml\");\n            }\n            else // Internet Explorer\n            {\n                xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n                xmlDoc.async = false;\n                xmlDoc.loadXML(txt);\n            }\n        } catch (e) {\n            alert(\"Cannot convert the XML string to a cross-browser XML object.\");\n        }\r\n\r\n        return xmlDoc;\n    };\r\n\r\n```\r\n\r\nFWIW, my current workaround, from the SOAP execute method, skip the call to the XmlParser. Now, my calling code looks like this:\r\n\r\n```\n    var response = XrmServiceToolkit.Soap.Execute(requestMain, function (response) {\n        var workflowId = $(response).find( \"a\\\\:KeyValuePairOfstringanyType:first\").find(\"c\\\\:value:first\").text();\n        successCallback(workflowId);\n    }, errorCallback);\r\n\r\n```\r\n\r\nI believe this to be a bug in your latest version, 1.4.1.\r\n\r\nThanks for your patience.\r\n\r\nCheers.",
      "PostedDate": "2013-04-21T10:54:26.43-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Hi There.\r\n\r\nThe second way is the correct method to consume response from SOAP. Please have a look at the other soap methods in the XrmServiceToolkit.cs (QueryByAttribute, QueryAll, Associate, etc), you will notice none of the methods use selectSingleNode\r\n\r\nAs far as I remember, DOMParser is supported since IE9, so that maybe the reason why your original code is not working.\r\n\r\nHope this helps.\nJaimie",
      "PostedDate": "2013-04-22T01:45:19.87-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-08T02:06:14.55-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T04:17:07.777-07:00",
      "Id": -2147483648
    }
  ]
}