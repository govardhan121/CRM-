[
  {
    "Id": "1366612",
    "ThreadId": "587898",
    "Html": "I think the toolkit could handle AliasedValue attributes better.\r<br />\n<br />\nCurrently the toolkit returns the type of these attributes as AliasedValue, rather than the underlying attribute type.\r<br />\n<br />\nThe following check will ensure the correct type is checked and attribute handled correctly.  \r<br />\n<pre><code>if (sType.replace('c:', '').replace('a:', '') === &quot;AliasedValue&quot;) {\n    var subNode = tempNode.childNodes[2];\n    sType = $(subNode).attr(&quot;i:type&quot;);\n    tempNode = subNode;\n}</code></pre>\n\nThis needs to be added in the deserialize function after the line:<br />\n<pre><code>// Determine the Type of Attribute value we should expect\nvar sType = tempNode.attributes.getNamedItem(&quot;i:type&quot;).value;</code></pre>\n\nThis will also fix an apparent bug in the toolkit where an EntityReference attribute from a linked entity is not handled correctly, because the check for an EntityReference attribute type for an AliasedValue is incorrectly checking for a:EntityReference instead of EntityReference.\r<br />\n<br />\nI'm prettry sure that this block of code would no longer necessary.<br />\n<pre><code>//@Credit: Thanks for Tanguy92's code from CodePlex\nelse if (entCv.type === &quot;AliasedValue&quot;) {\n    var currentNode = tempNode.childNodes[2];\n    entCv.value = getNodeText(currentNode);\n    if (currentNode.attributes.getNamedItem(&quot;i:type&quot;).nodeValue.split(&quot;:&quot;)[1] === &quot;EntityReference&quot;) {\n        entCv = new xrmEntityReference();\n        entCv.type = &quot;EntityReference&quot;;\n        entCv.id = getNodeText(currentNode.childNodes[0]);\n        entCv.logicalName = getNodeText(currentNode.childNodes[1]);\n        entCv.name = getNodeText(currentNode.childNodes[2]);\n    }\n}</code></pre>\n\n",
    "PostedDate": "2015-03-18T04:56:46.217-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1367018",
    "ThreadId": "587898",
    "Html": "I've actually found another issue which doesn't affect the original published code but is an issue if using my &quot;fix&quot;.\r<br />\n<br />\nThe default block in the switch statement extracts the text value like this:<br />\n<pre><code>entCv.value = getNodeText(tempParentNode.childNodes[1]);</code></pre>\n\nwith my changes in places this needs to be:<br />\n<pre><code>entCv.value = getNodeText(tempNode);</code></pre>\n\nFor clarity here is my amended deserialize function in full.<br />\n<pre><code>        /**\n        * Deserialize an XML node into a CRM Business Entity object. The XML node comes from CRM Web Service's response.\n        * @param {object} resultNode The XML node returned from CRM Web Service's Fetch, Retrieve, RetrieveMultiple messages.\n        */\n        deserialize: function (resultNode) {\n            var obj = new Object();\n            var resultNodes = resultNode.childNodes;\n\n            for (var j = 0, lenj = resultNodes.length; j &lt; lenj; j++) {\n                var sKey;\n                var parentNode = resultNodes[j];\n                switch (parentNode.nodeName) {\n                    case &quot;a:Attributes&quot;:\n                        var attr = parentNode;\n                        for (var k = 0, lenk = attr.childNodes.length; k &lt; lenk; k++) {\n\n                            var tempParentNode = attr.childNodes[k];\n                            // Establish the Key for the Attribute\n                            var tempParentNodeChildNodes = tempParentNode.childNodes;\n\n                            sKey = getNodeText(tempParentNodeChildNodes[0]);\n\n                            var tempNode = tempParentNodeChildNodes[1];\n\n                            // Determine the Type of Attribute value we should expect\n                            var sType = tempNode.attributes.getNamedItem(&quot;i:type&quot;).value;\n\n                            // check for AliasedValue\n                            if (sType.replace('c:', '').replace('a:', '') === &quot;AliasedValue&quot;) {\n                                // reset the type to the actual attribute type\n                                var subNode = tempNode.childNodes[2];\n                                sType = $(subNode).attr(&quot;i:type&quot;);\n\n                                // reset the node to the AliasedValue value node\n                                tempNode = subNode;\n                            }\n\n                            var entRef;\n                            var entCv;\n                            switch (sType) {\n                                case &quot;a:OptionSetValue&quot;:\n                                    var entOsv = new xrmOptionSetValue();\n                                    entOsv.type = sType.replace('a:', '');\n                                    entOsv.value = parseInt(getNodeText(tempNode));\n                                    obj[sKey] = entOsv;\n                                    break;\n\n                                case &quot;a:EntityReference&quot;:\n                                    entRef = new xrmEntityReference();\n                                    entRef.type = sType.replace('a:', '');\n                                    var oChildNodes = tempNode.childNodes;\n                                    entRef.id = getNodeText(oChildNodes[0]);\n                                    entRef.logicalName = getNodeText(oChildNodes[1]);\n                                    entRef.name = getNodeText(oChildNodes[2]);\n                                    obj[sKey] = entRef;\n                                    break;\n\n                                case &quot;a:EntityCollection&quot;:\n                                    entRef = new xrmEntityCollection();\n                                    entRef.type = sType.replace('a:', '');\n\n                                    //get all party items....\n                                    var items = [];\n                                    var partyNodes = tempNode.childNodes;\n                                    for (var y = 0, leny = partyNodes[0].childNodes.length; y &lt; leny; y++) {\n                                        var itemNodes = tempParentNode.childNodes[1].childNodes[0].childNodes[y].childNodes[0].childNodes;\n                                        for (var z = 0, lenz = itemNodes.length; z &lt; lenz; z++) {\n                                            var itemNodeChildNodes = itemNodes[z].childNodes;\n                                            var nodeText = getNodeText(itemNodeChildNodes[0]);\n                                            if (nodeText === &quot;partyid&quot;) {\n                                                var itemRef = new xrmEntityReference();\n                                                itemRef.id = getNodeText(itemNodeChildNodes[1].childNodes[0]);\n                                                itemRef.logicalName = getNodeText(itemNodeChildNodes[1].childNodes[1]);\n                                                itemRef.name = getNodeText(itemNodeChildNodes[1].childNodes[2]);\n                                                items[y] = itemRef;\n                                            }\n                                        }\n                                    }\n                                    entRef.value = items;\n                                    obj[sKey] = entRef;\n                                    break;\n\n                                case &quot;a:Money&quot;:\n                                    entCv = new xrmValue();\n                                    entCv.type = sType.replace('a:', '');\n                                    entCv.value = parseFloat(getNodeText(tempNode));\n                                    obj[sKey] = entCv;\n                                    break;\n\n                                default:\n                                    entCv = new xrmValue();\n                                    entCv.type = sType.replace('c:', '').replace('a:', '');\n                                    if (entCv.type === &quot;int&quot;) {\n                                        entCv.value = parseInt(getNodeText(tempNode));\n                                    }\n                                    else if (entCv.type === &quot;decimal&quot; || entCv.type === &quot;double&quot;) {\n                                        entCv.value = parseFloat(getNodeText(tempNode));\n                                    }\n                                    else if (entCv.type === &quot;dateTime&quot;) {\n                                        entCv.value = stringToDate(getNodeText(tempNode));\n                                    }\n                                    else if (entCv.type === &quot;boolean&quot;) {\n                                        entCv.value = (getNodeText(tempNode) === 'false') ? false : true;\n                                    }\n                                    // suspect this block of code is no longer required as AliasedValue is handled previously\n                                    //@Credit: Thanks for Tanguy92's code from CodePlex\n                                    else if (entCv.type === &quot;AliasedValue&quot;) {\n                                        var currentNode = tempNode.childNodes[2];\n                                        entCv.value = getNodeText(currentNode);\n                                        if (currentNode.attributes.getNamedItem(&quot;i:type&quot;).nodeValue.split(&quot;:&quot;)[1] === &quot;EntityReference&quot;) {\n                                            entCv = new xrmEntityReference();\n                                            entCv.type = &quot;EntityReference&quot;;\n                                            entCv.id = getNodeText(currentNode.childNodes[0]);\n                                            entCv.logicalName = getNodeText(currentNode.childNodes[1]);\n                                            entCv.name = getNodeText(currentNode.childNodes[2]);\n                                        }\n                                    }\n                                    else {\n                                        // extract the text from the value node\n                                        entCv.value = getNodeText(tempNode);\n                                    }\n                                    obj[sKey] = entCv;\n                                    break;\n                            }\n                        }\n                        this.attributes = obj;\n                        break;\n\n                    case &quot;a:Id&quot;:\n                        this.id = getNodeText(parentNode);\n                        break;\n\n                    case &quot;a:LogicalName&quot;:\n                        this.logicalName = getNodeText(parentNode);\n                        break;\n\n                    case &quot;a:FormattedValues&quot;:\n                        var foVal = parentNode;\n\n                        for (var o = 0, leno = foVal.childNodes.length; o &lt; leno; o++) {\n                            // Establish the Key, we are going to fill in the formatted value of the already found attribute\n                            var foNode = foVal.childNodes[o];\n                            sKey = getNodeText(foNode.childNodes[0]);\n                            this.attributes[sKey].formattedValue = getNodeText(foNode.childNodes[1]);\n                            if (isNaN(this.attributes[sKey].value) &amp;&amp; this.attributes[sKey].type === &quot;dateTime&quot;) {\n                                this.attributes[sKey].value = new Date(this.attributes[sKey].formattedValue);\n                            }\n                        }\n                        break;\n                }\n            }\n        }</code></pre>\n\n",
    "PostedDate": "2015-03-19T03:54:43.14-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1432270",
    "ThreadId": "587898",
    "Html": "Hi There.\r<br />\n<br />\nMany thanks for the submission of the bugs and the code to fix.\r<br />\n<br />\nThese should be included in the latest release.\r<br />\n<br />\nKind Regards,\r<br />\nJaimie<br />\n",
    "PostedDate": "2015-06-29T02:50:32.613-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]